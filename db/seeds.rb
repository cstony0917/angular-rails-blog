Post.create!([
  {title: "jbuilder 如何自動展開所有欄位", content: "一開始使用jbuilder的時候並不知道有這個功能，想說要一個一個把欄位解開(extract!)來，GOOGLE了一下，找到下面這種作法\n\n\t  json.merge! p.attributes\n\n[參考連結](http://stackoverflow.com/questions/23027644/how-to-extract-all-attributes-with-rails-jbuilder)\n\n\n範例程式碼\n\n```\njson.array! @posts do |p|\n  json.merge! p.attributes\n  json.content p.content[0..50]\nend\n```", rendered_content: "<p>一開始使用jbuilder的時候並不知道有這個功能，想說要一個一個把欄位解開(extract!)來，GOOGLE了一下，找到下面這種作法</p>\n\n<pre><code>  json.merge! p.attributes\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/questions/23027644/how-to-extract-all-attributes-with-rails-jbuilder\" target=\"_blank\">參考連結</a></p>\n\n<p>範例程式碼</p>\n\n<pre><code>json.array! @posts do |p|\n  json.merge! p.attributes\n  json.content p.content[0..50]\nend\n</code></pre>\n", state: "published", published_at: "2015-05-19 00:00:00"},
  {title: "使用 redcarpet 解析markdown時如何讓code部分自動產生區塊", content: "render時加上`fenced_code_blocks: true`參數即可\n\n\n範例\n```\nmarkdown = Redcarpet::Markdown.new(HTMLwithPygments, fenced_code_blocks: true)\n```", rendered_content: "<p>render時加上<code>fenced_code_blocks: true</code>參數即可</p>\n\n<p>範例</p>\n\n<pre><code>markdown = Redcarpet::Markdown.new(HTMLwithPygments, fenced_code_blocks: true)\n</code></pre>\n", state: "published", published_at: "2015-05-20 00:00:00"},
  {title: "RAILS 將資料庫儲存到db seed裡面", content: "參考資料\n<https://github.com/rroblak/seed_dump>\n\n在Gemfile中加入\n\n\tgem 'seed_dump'\n\n或者是直接在終端機輸入\n\n    $ gem install seed_dump\n\n接著就可以使用\n\n    $ rake db:seed:dump\n    \n如果有用heroku的話會發現檔案系統沒辦法直接被存取\n    \n", rendered_content: "<p>參考資料\n<a href=\"https://github.com/rroblak/seed_dump\" target=\"_blank\">https://github.com/rroblak/seed_dump</a></p>\n\n<p>在Gemfile中加入</p>\n\n<pre><code>gem &#39;seed_dump&#39;\n</code></pre>\n\n<p>或者是直接在終端機輸入</p>\n\n<pre><code>$ gem install seed_dump\n</code></pre>\n\n<p>接著就可以使用</p>\n\n<pre><code>$ rake db:seed:dump\n</code></pre>\n\n<p>如果有用heroku的話會發現檔案系統沒辦法直接被存取</p>\n", state: "published", published_at: "2015-05-21 00:00:00"},
  {title: "使用GITHUB HOSTING RAILS的ASSETS", content: "# 文章內容可能有問題請小心服用XDD\n\n\n使用heroku時會發現，heroku並沒有提供亞洲的伺服器，先天上因為地理問題，伺服器的反應時間一定會比較慢。\n\nGITHUB有提供靜態網頁檔案HOSTING的服務，只要新增一個分支叫做**gh-pages**就可以了!，利用這個方法可以讓我們搭配寫好的bash指令在部屬heroku的同時將assets放到github上。\n\n###準備一個git repo來放置要部屬assets檔案\n\n在github上新增repo之後（ 假設專案名稱為zackexplosion )\n\n``` bash\nmkdir zackexplosion\ncd zackexplosion\n\ngit remote add origin https://github.com/cstony0917/zackexplosion.git\n```\n\n在**config/environments/production.rb**加上github-pages的連結\n\n```\nconfig.action_controller.asset_host = '//cstony0917.github.io/zackexplosion/'\n```\n\n接著增新一個部屬專用的shell檔案，命名為**deploy**，內容如下\n\n```\n#!/bin/bash\ndate1=$(date +\"%s\")\n\nASSETS_HOSTING_DOMAIN=cdn.zackexplosion.com RAILS_ENV=production rake assets:precompile\n# rm -rf ../zackexplosion/assets\n# mv -vf public/assets/ ../zackexplosion/\n# mkdir public/assets\n\n# clean old mani file\nrm -rf ../zackexplosion/assets/mani*.json\n\n# copy new assets\ncp -av public/* ../zackexplosion/\n\n# remove local compile assets\nrm -rf public/assets/*\n\n# get newest manifile\ncp -v ../zackexplosion/assets/mani*.json public/assets/\n\ngit add .\ngit commit -m 'update manifest'\n\ncd ../zackexplosion\n# git branch gh-pages\ngit add .\ngit commit -m 'update assets'\ngit push origin master\n\ncd ../blog\n#pwd\n#ls\n\n#git push heroku master\ngit remote | xargs -L1 git push --all\nheroku run rake db:migrate\n\ndate2=$(date +\"%s\")\ndiff=$(($date2-$date1))\necho \"depoly cost $(($diff / 60)) minutes and $(($diff % 60)) seconds.\"\n```\n\n其中**blog**是目前專案的資料夾名稱。接著要使用就可以直接\n\n```\nsh ./deploy\n```\n\n最後回到heroko上看，確定網頁是否正常!", rendered_content: "<h1>文章內容可能有問題請小心服用XDD</h1>\n\n<p>使用heroku時會發現，heroku並沒有提供亞洲的伺服器，先天上因為地理問題，伺服器的反應時間一定會比較慢。</p>\n\n<p>GITHUB有提供靜態網頁檔案HOSTING的服務，只要新增一個分支叫做<strong>gh-pages</strong>就可以了!，利用這個方法可以讓我們搭配寫好的bash指令在部屬heroku的同時將assets放到github上。</p>\n\n<h3>準備一個git repo來放置要部屬assets檔案</h3>\n\n<p>在github上新增repo之後（ 假設專案名稱為zackexplosion )</p>\n\n<pre><code class=\"bash\">mkdir zackexplosion\ncd zackexplosion\n\ngit remote add origin https://github.com/cstony0917/zackexplosion.git\n</code></pre>\n\n<p>在<strong>config/environments/production.rb</strong>加上github-pages的連結</p>\n\n<pre><code>config.action_controller.asset_host = &#39;//cstony0917.github.io/zackexplosion/&#39;\n</code></pre>\n\n<p>接著增新一個部屬專用的shell檔案，命名為<strong>deploy</strong>，內容如下</p>\n\n<pre><code>#!/bin/bash\ndate1=$(date +&quot;%s&quot;)\n\nASSETS_HOSTING_DOMAIN=cdn.zackexplosion.com RAILS_ENV=production rake assets:precompile\n# rm -rf ../zackexplosion/assets\n# mv -vf public/assets/ ../zackexplosion/\n# mkdir public/assets\n\n# clean old mani file\nrm -rf ../zackexplosion/assets/mani*.json\n\n# copy new assets\ncp -av public/* ../zackexplosion/\n\n# remove local compile assets\nrm -rf public/assets/*\n\n# get newest manifile\ncp -v ../zackexplosion/assets/mani*.json public/assets/\n\ngit add .\ngit commit -m &#39;update manifest&#39;\n\ncd ../zackexplosion\n# git branch gh-pages\ngit add .\ngit commit -m &#39;update assets&#39;\ngit push origin master\n\ncd ../blog\n#pwd\n#ls\n\n#git push heroku master\ngit remote | xargs -L1 git push --all\nheroku run rake db:migrate\n\ndate2=$(date +&quot;%s&quot;)\ndiff=$(($date2-$date1))\necho &quot;depoly cost $(($diff / 60)) minutes and $(($diff % 60)) seconds.&quot;\n</code></pre>\n\n<p>其中<strong>blog</strong>是目前專案的資料夾名稱。接著要使用就可以直接</p>\n\n<pre><code>sh ./deploy\n</code></pre>\n\n<p>最後回到heroko上看，確定網頁是否正常!</p>\n", state: "published", published_at: "2015-05-23 00:00:00"},
  {title: "在 Rails 的 service 中使用 logger", content: "最近有個 function 很肥大，所以就參考同事的寫法把它做成 service object 沒想到使用`logger.info var`時卻會報錯誤。\n\n```\nundefined local variable or method `logger' for #<Class:0x42fd77c>\n```\n\n解法非常簡單，前面多個 Rails就搞定了。\n\n``` ruby\nRails.logger.info var\n```\n\n不過我很好奇為什麼會造成這樣的問題，乍看之下應該是scope的不同，所以來做個簡單的實驗\n\n原本的service\n\n``` ruby\nclass MyService\n\tdef initialize\n    \tmy_var = Model.first\n    \tlogger.info my_vars\n    end\nend\n```\n\n繼承 application controller 之後\n\n\n``` ruby\nclass MyService < ApplicationController\n\tdef initialize\n    \tmy_var = Model.first\n    \tlogger.info my_vars\n    end\nend\n```\n\n就不會報錯誤了!看起來`logger`是繼承下來的方法，因此在service object裡面要從Rails這個物件開始操作才有辦法使用。\n\n\n參考資料\n* <http://jasonseifer.com/2009/08/10/using-the-rails-logger-outside-of-models-and-controllers>", rendered_content: "<p>最近有個 function 很肥大，所以就參考同事的寫法把它做成 service object 沒想到使用<code>logger.info var</code>時卻會報錯誤。</p>\n\n<pre><code>undefined local variable or method `logger&#39; for #&lt;Class:0x42fd77c&gt;\n</code></pre>\n\n<p>解法非常簡單，前面多個 Rails就搞定了。</p>\n\n<pre><code class=\"ruby\">Rails.logger.info var\n</code></pre>\n\n<p>不過我很好奇為什麼會造成這樣的問題，乍看之下應該是scope的不同，所以來做個簡單的實驗</p>\n\n<p>原本的service</p>\n\n<pre><code class=\"ruby\">class MyService\n    def initialize\n        my_var = Model.first\n        logger.info my_vars\n    end\nend\n</code></pre>\n\n<p>繼承 application controller 之後</p>\n\n<pre><code class=\"ruby\">class MyService &lt; ApplicationController\n    def initialize\n        my_var = Model.first\n        logger.info my_vars\n    end\nend\n</code></pre>\n\n<p>就不會報錯誤了!看起來<code>logger</code>是繼承下來的方法，因此在service object裡面要從Rails這個物件開始操作才有辦法使用。</p>\n\n<p>參考資料</p>\n\n<ul>\n<li><a href=\"http://jasonseifer.com/2009/08/10/using-the-rails-logger-outside-of-models-and-controllers\" target=\"_blank\">http://jasonseifer.com/2009/08/10/using-the-rails-logger-outside-of-models-and-controllers</a></li>\n</ul>\n", state: "published", published_at: "2015-06-03 00:00:00"},
  {title: "修改 BOOTSWATCH UNITED 原始碼", content: "目前部落格使用Bootswatch來套版型，預設的字體是從google font import來的，寫文的時候發現他居然沒有把粗體字放進來，不知道是故意的還是有什麼考量，總之我的文章內容就是需要粗體字。\n\n再次發現自己很龜毛，其實自己重新import一次有粗體的google font就好了，不過這樣user在載入時就會多一條request，為了達到網站的高效能，決定自己修改bootswatch的原始碼 其實也不過改一行而已 lol)\n\n\n首先，自己fork一份 <https://github.com/cstony0917/bootswatch-rails>\n\n接著打開 **vendor/assets/stylesheets/bootswatch/united/_bootswatch.scss**\n\n把原來的註解掉，增加Bold字體\n\n``` sass\n// United 3.3.4\n// Bootswatch\n// -----------------------------------------------------\n\n// @import url(\"//fonts.googleapis.com/css?family=Ubuntu\");\n@import url(//fonts.googleapis.com/css?family=Ubuntu:400,700);\n\n// Navbar =====================================================================\n```\n\n接著將Gemfile裡面的安裝來源改為自己的github\n\n``` ruby\n# gem 'bootswatch-rails'\ngem 'bootswatch-rails', :git => 'https://github.com/cstony0917/bootswatch-rails.git'\n```\n\n這樣內文中有```**強調**```的部份就會有粗體了!，特別是英文的部份，我通常會把檔名作為強調的內容，~~接下來就看官方會不會接受小弟我的PULL REQUEST了 Orz~~\n\n附圖\n![Imgur](http://i.imgur.com/r33p4ee.png)\n\n結果pull request發不到五分鐘就有人回復了啊！！！！！<https://github.com/maxim/bootswatch-rails/pull/78#issuecomment-105600451>\n\n\n", rendered_content: "<p>目前部落格使用Bootswatch來套版型，預設的字體是從google font import來的，寫文的時候發現他居然沒有把粗體字放進來，不知道是故意的還是有什麼考量，總之我的文章內容就是需要粗體字。</p>\n\n<p>再次發現自己很龜毛，其實自己重新import一次有粗體的google font就好了，不過這樣user在載入時就會多一條request，為了達到網站的高效能，決定自己修改bootswatch的原始碼 其實也不過改一行而已 lol)</p>\n\n<p>首先，自己fork一份 <a href=\"https://github.com/cstony0917/bootswatch-rails\" target=\"_blank\">https://github.com/cstony0917/bootswatch-rails</a></p>\n\n<p>接著打開 <strong>vendor/assets/stylesheets/bootswatch/united/_bootswatch.scss</strong></p>\n\n<p>把原來的註解掉，增加Bold字體</p>\n\n<pre><code class=\"sass\">// United 3.3.4\n// Bootswatch\n// -----------------------------------------------------\n\n// @import url(&quot;//fonts.googleapis.com/css?family=Ubuntu&quot;);\n@import url(//fonts.googleapis.com/css?family=Ubuntu:400,700);\n\n// Navbar =====================================================================\n</code></pre>\n\n<p>接著將Gemfile裡面的安裝來源改為自己的github</p>\n\n<pre><code class=\"ruby\"># gem &#39;bootswatch-rails&#39;\ngem &#39;bootswatch-rails&#39;, :git =&gt; &#39;https://github.com/cstony0917/bootswatch-rails.git&#39;\n</code></pre>\n\n<p>這樣內文中有<code>**強調**</code>的部份就會有粗體了!，特別是英文的部份，我通常會把檔名作為強調的內容，<del>接下來就看官方會不會接受小弟我的PULL REQUEST了 Orz</del></p>\n\n<p>附圖\n<img src=\"http://i.imgur.com/r33p4ee.png\" alt=\"Imgur\"></p>\n\n<p>結果pull request發不到五分鐘就有人回復了啊！！！！！<a href=\"https://github.com/maxim/bootswatch-rails/pull/78#issuecomment-105600451\" target=\"_blank\">https://github.com/maxim/bootswatch-rails/pull/78#issuecomment-105600451</a></p>\n", state: "published", published_at: "2015-05-27 00:00:00"},
  {title: "使用 TWITCH API 查看頻道是否實況中", content: "![Imgur](http://i.imgur.com/OL31tb3.png)\n\n## 更新\n\n後來發現TWITCH的API支援JSONP，所以可以省掉SERVER資源，直接從CLIENT去檢查，JS的部份改為\n\n``` javascript\n    $rootScope.streaming = false;\n\n    $rootScope.is_streaming = function(){\n        return $rootScope.streaming;\n    }\n\n    var iframe = '<iframe src=\"http://www.twitch.tv/cstony0917/embed\" frameborder=\"0\" scrolling=\"no\" height=\"378\" width=\"620\"></iframe><a href=\"http://www.twitch.tv/cstony0917?tt_medium=live_embed&tt_content=text_link\" style=\"padding:2px 0px 4px; display:block; width:345px; font-weight:normal; font-size:10px;text-decoration:underline;\">Watch live video from csTony0917 on www.twitch.tv</a>';\n    var wrapper = angular.element(document.querySelector('#livehouse .video-wrapper'))\n\n    $http.jsonp('https://api.twitch.tv/kraken/streams/cstony0917?callback=JSON_CALLBACK').success(function(res){        \n        var streaming = !(res.stream === null);\n        $rootScope.changeLiveStatus(streaming);\n    });\n\n\n    $rootScope.changeLiveStatus = function(streaming){\n        if(typeof streaming === 'undefined'){\n            $rootScope.streaming = !$rootScope.streaming;\n        }else{\n            $rootScope.streaming = streaming;\n        }            \n\n        if(!$rootScope.streaming){\n            wrapper.html('');\n        }else{\n            wrapper.html(iframe);\n        }\n    }\n```\n\n最後到controller裡面把streaming的action刪掉\n\n## 原文\n\n今天比較了一下livehouse.in與TWITCH，發現兩者的使用方式已經差不多了，但這邊有個需求，我需要知道我的頻道是否實況中，是的話才會在網站中嵌入實況的CODE。livehouse.in找了半天發現他們所有頻道的狀態跟事件都是靠websocket來廣播，官方網站上也沒有提到API的部份，相反，TWITCH就提供了許多API可以給開發者使用。\n\nTWITCH很大方地將他們的API放在GITHUB上\n*  <https://github.com/justintv/twitch-api>\n\n而我使用了其中一個streams的API，可以查看該頻道是否正在實況中。下面的CODE寫在**applicaton_controller.rb**中\n\n``` ruby\n  def streaming\n    require 'net/http'\n    uri = URI('https://api.twitch.tv/kraken/streams/cstony0917')\n    res = Net::HTTP.get(uri) # => String\n    res = JSON.parse(res)\n    \n    m = res['stream'] != nil\n    render :json => m\n  end\n```\n\n記得在**routes.rb**加上\n\n``` ruby\nget 'streaming' => 'application#streaming'\n```\n\n如果頻道不在live時，**stream**這個KEY的直就會給NULL\n\n參考資料\n*  <https://github.com/justintv/Twitch-API/blob/master/v3_resources/streams.md>\n\n而前端利用AJAX檢查是否為streaming的CODE\n\n``` javascript\n    $rootScope.streaming = false;\n\n    $rootScope.is_streaming = function(){\n        return $rootScope.streaming;\n    }\n\n    var iframe = '<iframe src=\"http://www.twitch.tv/cstony0917/embed\" frameborder=\"0\" scrolling=\"no\" height=\"378\" width=\"620\"></iframe><a href=\"http://www.twitch.tv/cstony0917?tt_medium=live_embed&tt_content=text_link\" style=\"padding:2px 0px 4px; display:block; width:345px; font-weight:normal; font-size:10px;text-decoration:underline;\">Watch live video from csTony0917 on www.twitch.tv</a>';\n    var wrapper = angular.element(document.querySelector('#livehouse .video-wrapper'))\n\n    $http.get('/streaming').success(function(res){\n        // wrapper.html(iframe);\n        $rootScope.changeLiveStatus(res);\n    });\n\n\n    $rootScope.changeLiveStatus = function(streaming){\n        if(typeof streaming === 'undefined'){\n            $rootScope.streaming = !$rootScope.streaming;\n        }else{\n            $rootScope.streaming = streaming;\n        }            \n\n        if(!$rootScope.streaming){\n            wrapper.html('');\n        }else{\n            wrapper.html(iframe);\n        }\n    }\n```\n\n前端template\n\n``` html\n  <div id=\"livehouse\" ng-class=\"{living : is_streaming()}\">\n    <div class=\"buttons\" ng-click=\"changeLiveStatus()\">\n      <button ng-show=\"is_streaming()\" class=\"btn\"><span class=\"glyphicon glyphicon-chevron-up\"></span></button>\n      <button ng-hide=\"is_streaming()\" class=\"btn\"><span class=\"glyphicon glyphicon-chevron-down\"></span></button>\n    </div>\n    <h3 ng-click=\"changeLiveStatus()\">現場直播</h3>\n    <div ng-show=\"is_streaming()\" class=\"video-wrapper\"></div>\n    <hr />\n  </div>\n```\n\n這樣就可以讓訪客進來時不會因為沒有在實況又看到實況的區塊了。\n\n\n", rendered_content: "<p><img src=\"http://i.imgur.com/OL31tb3.png\" alt=\"Imgur\"></p>\n\n<h2>更新</h2>\n\n<p>後來發現TWITCH的API支援JSONP，所以可以省掉SERVER資源，直接從CLIENT去檢查，JS的部份改為</p>\n\n<pre><code class=\"javascript\">    $rootScope.streaming = false;\n\n    $rootScope.is_streaming = function(){\n        return $rootScope.streaming;\n    }\n\n    var iframe = &#39;&lt;iframe src=&quot;http://www.twitch.tv/cstony0917/embed&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; height=&quot;378&quot; width=&quot;620&quot;&gt;&lt;/iframe&gt;&lt;a href=&quot;http://www.twitch.tv/cstony0917?tt_medium=live_embed&amp;tt_content=text_link&quot; style=&quot;padding:2px 0px 4px; display:block; width:345px; font-weight:normal; font-size:10px;text-decoration:underline;&quot;&gt;Watch live video from csTony0917 on www.twitch.tv&lt;/a&gt;&#39;;\n    var wrapper = angular.element(document.querySelector(&#39;#livehouse .video-wrapper&#39;))\n\n    $http.jsonp(&#39;https://api.twitch.tv/kraken/streams/cstony0917?callback=JSON_CALLBACK&#39;).success(function(res){        \n        var streaming = !(res.stream === null);\n        $rootScope.changeLiveStatus(streaming);\n    });\n\n\n    $rootScope.changeLiveStatus = function(streaming){\n        if(typeof streaming === &#39;undefined&#39;){\n            $rootScope.streaming = !$rootScope.streaming;\n        }else{\n            $rootScope.streaming = streaming;\n        }            \n\n        if(!$rootScope.streaming){\n            wrapper.html(&#39;&#39;);\n        }else{\n            wrapper.html(iframe);\n        }\n    }\n</code></pre>\n\n<p>最後到controller裡面把streaming的action刪掉</p>\n\n<h2>原文</h2>\n\n<p>今天比較了一下livehouse.in與TWITCH，發現兩者的使用方式已經差不多了，但這邊有個需求，我需要知道我的頻道是否實況中，是的話才會在網站中嵌入實況的CODE。livehouse.in找了半天發現他們所有頻道的狀態跟事件都是靠websocket來廣播，官方網站上也沒有提到API的部份，相反，TWITCH就提供了許多API可以給開發者使用。</p>\n\n<p>TWITCH很大方地將他們的API放在GITHUB上</p>\n\n<ul>\n<li> <a href=\"https://github.com/justintv/twitch-api\" target=\"_blank\">https://github.com/justintv/twitch-api</a></li>\n</ul>\n\n<p>而我使用了其中一個streams的API，可以查看該頻道是否正在實況中。下面的CODE寫在<strong>applicaton_controller.rb</strong>中</p>\n\n<pre><code class=\"ruby\">  def streaming\n    require &#39;net/http&#39;\n    uri = URI(&#39;https://api.twitch.tv/kraken/streams/cstony0917&#39;)\n    res = Net::HTTP.get(uri) # =&gt; String\n    res = JSON.parse(res)\n\n    m = res[&#39;stream&#39;] != nil\n    render :json =&gt; m\n  end\n</code></pre>\n\n<p>記得在<strong>routes.rb</strong>加上</p>\n\n<pre><code class=\"ruby\">get &#39;streaming&#39; =&gt; &#39;application#streaming&#39;\n</code></pre>\n\n<p>如果頻道不在live時，<strong>stream</strong>這個KEY的直就會給NULL</p>\n\n<p>參考資料</p>\n\n<ul>\n<li> <a href=\"https://github.com/justintv/Twitch-API/blob/master/v3_resources/streams.md\" target=\"_blank\">https://github.com/justintv/Twitch-API/blob/master/v3_resources/streams.md</a></li>\n</ul>\n\n<p>而前端利用AJAX檢查是否為streaming的CODE</p>\n\n<pre><code class=\"javascript\">    $rootScope.streaming = false;\n\n    $rootScope.is_streaming = function(){\n        return $rootScope.streaming;\n    }\n\n    var iframe = &#39;&lt;iframe src=&quot;http://www.twitch.tv/cstony0917/embed&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; height=&quot;378&quot; width=&quot;620&quot;&gt;&lt;/iframe&gt;&lt;a href=&quot;http://www.twitch.tv/cstony0917?tt_medium=live_embed&amp;tt_content=text_link&quot; style=&quot;padding:2px 0px 4px; display:block; width:345px; font-weight:normal; font-size:10px;text-decoration:underline;&quot;&gt;Watch live video from csTony0917 on www.twitch.tv&lt;/a&gt;&#39;;\n    var wrapper = angular.element(document.querySelector(&#39;#livehouse .video-wrapper&#39;))\n\n    $http.get(&#39;/streaming&#39;).success(function(res){\n        // wrapper.html(iframe);\n        $rootScope.changeLiveStatus(res);\n    });\n\n\n    $rootScope.changeLiveStatus = function(streaming){\n        if(typeof streaming === &#39;undefined&#39;){\n            $rootScope.streaming = !$rootScope.streaming;\n        }else{\n            $rootScope.streaming = streaming;\n        }            \n\n        if(!$rootScope.streaming){\n            wrapper.html(&#39;&#39;);\n        }else{\n            wrapper.html(iframe);\n        }\n    }\n</code></pre>\n\n<p>前端template</p>\n\n<pre><code class=\"html\">  &lt;div id=&quot;livehouse&quot; ng-class=&quot;{living : is_streaming()}&quot;&gt;\n    &lt;div class=&quot;buttons&quot; ng-click=&quot;changeLiveStatus()&quot;&gt;\n      &lt;button ng-show=&quot;is_streaming()&quot; class=&quot;btn&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-chevron-up&quot;&gt;&lt;/span&gt;&lt;/button&gt;\n      &lt;button ng-hide=&quot;is_streaming()&quot; class=&quot;btn&quot;&gt;&lt;span class=&quot;glyphicon glyphicon-chevron-down&quot;&gt;&lt;/span&gt;&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;h3 ng-click=&quot;changeLiveStatus()&quot;&gt;現場直播&lt;/h3&gt;\n    &lt;div ng-show=&quot;is_streaming()&quot; class=&quot;video-wrapper&quot;&gt;&lt;/div&gt;\n    &lt;hr /&gt;\n  &lt;/div&gt;\n</code></pre>\n\n<p>這樣就可以讓訪客進來時不會因為沒有在實況又看到實況的區塊了。</p>\n", state: "published", published_at: "2015-05-24 00:00:00"},
  {title: "使用Rails 內建的XML Builder自己做 sitemap", content: "相信sitemap.xml對於做過SEO的人一定很熟悉，以往都會利用一些工具產生sitemap，但是想要產生sitemap又不想要另外裝套件的時候該怎麼辦呢？很簡單，就利用Rails內建的XML Builder自己寫吧!\n\n首先加入sitemap的路由\n\n**config/route.rb**\n\n``` ruby\nget 'templates' => 'application#template'\nget 'streaming' => 'application#streaming'\n\n# 加入下面這行\nget 'sitemap'   => 'application#sitemap'\n```\n\n接著定義一個新的action\n\n**app/controllers/application_controller.rb**\n\n``` ruby\n  def sitemap\n    @maps = []\n\n    @base = request.protocol + request.host\n    \n    @posts = Post.all\n    \n    render 'layouts/sitemap.builder'\n  end\n```\n\n因為目前blog很單純，就把所有文章的連結加上去就好了，另外留一個**@base**給後面的builder用，這邊要注意的地方是render後面接的參數，因為放在application_controller裡面，所以Rails預設不會去其他controller的資料夾找view，要特別指定view的位置。\n\n**app/views/layouts/sitemap.builder**\n\n``` ruby\n xml.instruct!\n xml.urlset(:xmlns => 'http://www.sitemaps.org/schemas/sitemap/0.9') do\n  xml.url do\n    xml.loc @base\n  end\n\n  @posts.each do |p|\n    xml.url do\n      xml.loc @base + '/p/' + p.id.to_s\n    end\n  end\n\n end\n```\n\nRails的xml builder非常好用，只要利用```xml.{標籤名稱}```這樣的語法就可以產生TAG，有下一階層的話就利用do block把包起來，如果需要用到xml atribute的時候就加上括號，接著帶一組hash就可以了，記得在urlset標籤加上xmlns這個屬性，不然在提交XML時Google會報錯誤訊息。\n\n最後產生的結果 <http://zackexplosion.com/sitemap.xml>\n\n![Imgur](http://i.imgur.com/yepidWS.png)\n\n參考資料\n\n* <http://builder.rubyforge.org/classes/Builder/XmlMarkup.html>\n* <https://www.siteground.com/tutorials/sitemap/sitemap_example.htm>\n\n", rendered_content: "<p>相信sitemap.xml對於做過SEO的人一定很熟悉，以往都會利用一些工具產生sitemap，但是想要產生sitemap又不想要另外裝套件的時候該怎麼辦呢？很簡單，就利用Rails內建的XML Builder自己寫吧!</p>\n\n<p>首先加入sitemap的路由</p>\n\n<p><strong>config/route.rb</strong></p>\n\n<pre><code class=\"ruby\">get &#39;templates&#39; =&gt; &#39;application#template&#39;\nget &#39;streaming&#39; =&gt; &#39;application#streaming&#39;\n\n# 加入下面這行\nget &#39;sitemap&#39;   =&gt; &#39;application#sitemap&#39;\n</code></pre>\n\n<p>接著定義一個新的action</p>\n\n<p><strong>app/controllers/application_controller.rb</strong></p>\n\n<pre><code class=\"ruby\">  def sitemap\n    @maps = []\n\n    @base = request.protocol + request.host\n\n    @posts = Post.all\n\n    render &#39;layouts/sitemap.builder&#39;\n  end\n</code></pre>\n\n<p>因為目前blog很單純，就把所有文章的連結加上去就好了，另外留一個<strong>@base</strong>給後面的builder用，這邊要注意的地方是render後面接的參數，因為放在application_controller裡面，所以Rails預設不會去其他controller的資料夾找view，要特別指定view的位置。</p>\n\n<p><strong>app/views/layouts/sitemap.builder</strong></p>\n\n<pre><code class=\"ruby\"> xml.instruct!\n xml.urlset(:xmlns =&gt; &#39;http://www.sitemaps.org/schemas/sitemap/0.9&#39;) do\n  xml.url do\n    xml.loc @base\n  end\n\n  @posts.each do |p|\n    xml.url do\n      xml.loc @base + &#39;/p/&#39; + p.id.to_s\n    end\n  end\n\n end\n</code></pre>\n\n<p>Rails的xml builder非常好用，只要利用<code>xml.{標籤名稱}</code>這樣的語法就可以產生TAG，有下一階層的話就利用do block把包起來，如果需要用到xml atribute的時候就加上括號，接著帶一組hash就可以了，記得在urlset標籤加上xmlns這個屬性，不然在提交XML時Google會報錯誤訊息。</p>\n\n<p>最後產生的結果 <a href=\"http://zackexplosion.com/sitemap.xml\" target=\"_blank\">http://zackexplosion.com/sitemap.xml</a></p>\n\n<p><img src=\"http://i.imgur.com/yepidWS.png\" alt=\"Imgur\"></p>\n\n<p>參考資料</p>\n\n<ul>\n<li><a href=\"http://builder.rubyforge.org/classes/Builder/XmlMarkup.html\" target=\"_blank\">http://builder.rubyforge.org/classes/Builder/XmlMarkup.html</a></li>\n<li><a href=\"https://www.siteground.com/tutorials/sitemap/sitemap_example.htm\" target=\"_blank\">https://www.siteground.com/tutorials/sitemap/sitemap_example.htm</a></li>\n</ul>\n", state: "published", published_at: "2015-05-28 00:00:00"},
  {title: "節省開發時間，預防關節炎 guard live reload", content: "在做web開發的朋友們一定會碰到一個問題，那就是每次的修改，。一定要透過重新整理來得到新的結果，長年下來因為重複按下重新整理的快速鍵~~星海爭霸~~導致了關節炎的發生，所以大家一定要把這個套件裝起來，好好保護手指呀!\n\n### 安裝GEM\n\n只給開發與測試環境\n\n``` ruby\ngroup :development, :test do\n  gem \"rack-livereload\"\n  gem 'guard-livereload', '~> 2.4', require: false\nend\n```\n\n接著，安裝GEM，如果有用POWDER的話記得將他restart\n\n``` bash\nbundle install && powder restart\n```\n\n產生Guardfile檔案\n\n``` bash\nguard init\n```\n\n最後，簡單的一個指令就可以把Guard打開\n\n``` bash\nguard\n```", rendered_content: "<p>在做web開發的朋友們一定會碰到一個問題，那就是每次的修改，。一定要透過重新整理來得到新的結果，長年下來因為重複按下重新整理的快速鍵<del>星海爭霸</del>導致了關節炎的發生，所以大家一定要把這個套件裝起來，好好保護手指呀!</p>\n\n<h3>安裝GEM</h3>\n\n<p>只給開發與測試環境</p>\n\n<pre><code class=\"ruby\">group :development, :test do\n  gem &quot;rack-livereload&quot;\n  gem &#39;guard-livereload&#39;, &#39;~&gt; 2.4&#39;, require: false\nend\n</code></pre>\n\n<p>接著，安裝GEM，如果有用POWDER的話記得將他restart</p>\n\n<pre><code class=\"bash\">bundle install &amp;&amp; powder restart\n</code></pre>\n\n<p>產生Guardfile檔案</p>\n\n<pre><code class=\"bash\">guard init\n</code></pre>\n\n<p>最後，簡單的一個指令就可以把Guard打開</p>\n\n<pre><code class=\"bash\">guard\n</code></pre>\n", state: "published", published_at: "2015-05-18 00:00:00"},
  {title: "建立 bower 專案並且發佈到 rails-assets", content: "只要做 AJAX 的網站，一定會實作 Loading 的效果，不然網路卡的時候使用者根本不知道發生什麼事XD，現在的 blog 用`angularjs`搭配`ui-router`做前後台，自然也需要這個功能，不過現在只有前台有實作，後台沒有，造成了自己在打文章的時候常常看不到 Loading 以為網站掛掉的困擾XD。\n\n要讓後台也有 loading 效果最快的方法就是直接把 code 從前台的部份複製起來再到後台的 code 上，不過仔細想想後，覺得這樣的方法太蠢了XD，現在應該是模組化的世界，尤其在實作 blog 的時候，有很多套件用 Rails-assets 裝，乾脆就把 loading 效果的部份打包起來丟到 Rails-asset 上吧XD，這樣同時只要維護一份 code 就行了。\n\n因為 rails-assets 主要是讀取專案中的 bower.json 因此我們需要先建立 bower 專案。\n\n### 建立bower專案\n```\nmkdir zackexplosion-ngLoading\ncd zackexplosion-ngLoading\n```\n\n接著，使用`bower init`的指令初始化 bower 專案，按照裡面的問題填一填就可以把專案設定好。\n\n``` bash\n? name: zackexplosion-ngLoading\n? version: 1.2.0\n? description: an angularjs http loading effect\n? main file: js/zackexplosion-ngLoading.js,css/zackexplosion-ngLoading.css\n? what types of modules does this package expose?\n? keywords: angualrjs,http,loading\n? authors: Tony's Hackintosh <cstony0917@gmail.com>\n? license: MIT\n? homepage: http://zackexplosion.github.io/ngLoading/\n? set currently installed components as dependencies? Yes\n? add commonly ignored files to ignore list? Yes\n? would you like to mark this package as private which prevents it from being accidentally published to the registry? No\n```\n\n設定完成後。唯一要注意的是`main`這個參數，裡面要設定 bower 專案會用到的檔案。\n\nbower.json\n``` javascript\n{\n  \"name\": \"zackexplosion-ngLoading\",\n  \"version\": \"1.1.0\",\n  \"authors\": [\n    \"Tony's Hackintosh <cstony0917@gmail.com>\"\n  ],\n  \"main\": [\n    \"js/zackexplosion-ngLoading.js\",\n    \"css/zackexplosion-ngLoading.css\"\n  ],\n}\n\n...\n```\n\n設定好 bower.json 之後，使用指令`bower register <name> <url>` 註冊新的 bower 專案。\n\n``` bash\nbower register zackexplosion-ngLoading https://github.com/cstony0917/zackexplosion-ngLoading.git\nbower                          convert Converted https://github.com/cstony0917/zackexplosion-ngLoading.git to git://github.com/cstony0917/zackexplosion-ngLoading.git\nbower zackexplosion-ngLoading#*          resolve git://github.com/cstony0917/zackexplosion-ngLoading.git#*\nbower zackexplosion-ngLoading#*         checkout master\nbower zackexplosion-ngLoading#*         resolved git://github.com/cstony0917/zackexplosion-ngLoading.git#e3f1b7a7dd\n? Registering a package will make it installable via the registry (https://bower.herokuapp.com), continue? Yes\nbower zackexplosion-ngLoading           register git://github.com/cstony0917/zackexplosion-ngLoading.git\n\nPackage zackexplosion-ngLoading registered successfully!\nAll valid semver tags on git://github.com/cstony0917/zackexplosion-ngLoading.git will be available as versions.\nTo publish a new version, just release a valid semver tag.\n\nRun bower info zackexplosion-ngLoading to list the available versions.\n```\n\n### 發佈到 rails-assets\n\n先在 github 上新增一個 release 的 tag，填上版本號即可，這步驟一定要做，不然 rails-assets 會找不到版本資訊。\n![Imgur](http://i.imgur.com/ofLE72I.png)\n\n接著到<https://rails-assets.org/components/new>，填上 bower 的 packagename。\n![Imgur](http://i.imgur.com/arG7iLN.png)\n\n按下 Covert 之後，大約等十分鐘就可以在首頁上搜尋到剛剛發佈的專案。\n![Imgur](http://i.imgur.com/xZkqrUX.png)\n\n安裝的方法可以到[github](https://github.com/zackexplosion/ngLoading)上看 README，專案裡面還有用到 gulp，下次再來分享!\n\n\n\n### 參考資料\n* <http://stackoverflow.com/questions/18641899/what-is-the-difference-between-bower-and-npm>\n* <http://bower.io/docs/creating-packages/>\n", rendered_content: "<p>只要做 AJAX 的網站，一定會實作 Loading 的效果，不然網路卡的時候使用者根本不知道發生什麼事XD，現在的 blog 用<code>angularjs</code>搭配<code>ui-router</code>做前後台，自然也需要這個功能，不過現在只有前台有實作，後台沒有，造成了自己在打文章的時候常常看不到 Loading 以為網站掛掉的困擾XD。</p>\n\n<p>要讓後台也有 loading 效果最快的方法就是直接把 code 從前台的部份複製起來再到後台的 code 上，不過仔細想想後，覺得這樣的方法太蠢了XD，現在應該是模組化的世界，尤其在實作 blog 的時候，有很多套件用 Rails-assets 裝，乾脆就把 loading 效果的部份打包起來丟到 Rails-asset 上吧XD，這樣同時只要維護一份 code 就行了。</p>\n\n<p>因為 rails-assets 主要是讀取專案中的 bower.json 因此我們需要先建立 bower 專案。</p>\n\n<h3>建立bower專案</h3>\n\n<pre><code>mkdir zackexplosion-ngLoading\ncd zackexplosion-ngLoading\n</code></pre>\n\n<p>接著，使用<code>bower init</code>的指令初始化 bower 專案，按照裡面的問題填一填就可以把專案設定好。</p>\n\n<pre><code class=\"bash\">? name: zackexplosion-ngLoading\n? version: 1.2.0\n? description: an angularjs http loading effect\n? main file: js/zackexplosion-ngLoading.js,css/zackexplosion-ngLoading.css\n? what types of modules does this package expose?\n? keywords: angualrjs,http,loading\n? authors: Tony&#39;s Hackintosh &lt;cstony0917@gmail.com&gt;\n? license: MIT\n? homepage: http://zackexplosion.github.io/ngLoading/\n? set currently installed components as dependencies? Yes\n? add commonly ignored files to ignore list? Yes\n? would you like to mark this package as private which prevents it from being accidentally published to the registry? No\n</code></pre>\n\n<p>設定完成後。唯一要注意的是<code>main</code>這個參數，裡面要設定 bower 專案會用到的檔案。</p>\n\n<p>bower.json</p>\n\n<pre><code class=\"javascript\">{\n  &quot;name&quot;: &quot;zackexplosion-ngLoading&quot;,\n  &quot;version&quot;: &quot;1.1.0&quot;,\n  &quot;authors&quot;: [\n    &quot;Tony&#39;s Hackintosh &lt;cstony0917@gmail.com&gt;&quot;\n  ],\n  &quot;main&quot;: [\n    &quot;js/zackexplosion-ngLoading.js&quot;,\n    &quot;css/zackexplosion-ngLoading.css&quot;\n  ],\n}\n\n...\n</code></pre>\n\n<p>設定好 bower.json 之後，使用指令<code>bower register &lt;name&gt; &lt;url&gt;</code> 註冊新的 bower 專案。</p>\n\n<pre><code class=\"bash\">bower register zackexplosion-ngLoading https://github.com/cstony0917/zackexplosion-ngLoading.git\nbower                          convert Converted https://github.com/cstony0917/zackexplosion-ngLoading.git to git://github.com/cstony0917/zackexplosion-ngLoading.git\nbower zackexplosion-ngLoading#*          resolve git://github.com/cstony0917/zackexplosion-ngLoading.git#*\nbower zackexplosion-ngLoading#*         checkout master\nbower zackexplosion-ngLoading#*         resolved git://github.com/cstony0917/zackexplosion-ngLoading.git#e3f1b7a7dd\n? Registering a package will make it installable via the registry (https://bower.herokuapp.com), continue? Yes\nbower zackexplosion-ngLoading           register git://github.com/cstony0917/zackexplosion-ngLoading.git\n\nPackage zackexplosion-ngLoading registered successfully!\nAll valid semver tags on git://github.com/cstony0917/zackexplosion-ngLoading.git will be available as versions.\nTo publish a new version, just release a valid semver tag.\n\nRun bower info zackexplosion-ngLoading to list the available versions.\n</code></pre>\n\n<h3>發佈到 rails-assets</h3>\n\n<p>先在 github 上新增一個 release 的 tag，填上版本號即可，這步驟一定要做，不然 rails-assets 會找不到版本資訊。\n<img src=\"http://i.imgur.com/ofLE72I.png\" alt=\"Imgur\"></p>\n\n<p>接著到<a href=\"https://rails-assets.org/components/new\" target=\"_blank\">https://rails-assets.org/components/new</a>，填上 bower 的 packagename。\n<img src=\"http://i.imgur.com/arG7iLN.png\" alt=\"Imgur\"></p>\n\n<p>按下 Covert 之後，大約等十分鐘就可以在首頁上搜尋到剛剛發佈的專案。\n<img src=\"http://i.imgur.com/xZkqrUX.png\" alt=\"Imgur\"></p>\n\n<p>安裝的方法可以到<a href=\"https://github.com/zackexplosion/ngLoading\" target=\"_blank\">github</a>上看 README，專案裡面還有用到 gulp，下次再來分享!</p>\n\n<h3>參考資料</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/18641899/what-is-the-difference-between-bower-and-npm\" target=\"_blank\">http://stackoverflow.com/questions/18641899/what-is-the-difference-between-bower-and-npm</a></li>\n<li><a href=\"http://bower.io/docs/creating-packages/\" target=\"_blank\">http://bower.io/docs/creating-packages/</a></li>\n</ul>\n", state: "published", published_at: "2015-06-06 00:00:00"},
  {title: "Gulp 啟動錯誤  SyntaxError: Unexpected reserved word", content: "![Imgur](http://i.imgur.com/EYQsDlz.png)\n\n原本在桌機用[yeoman](https://github.com/yeoman/generator-gulp-webapp)專案搬到筆電上之後居然跑不起來，弄了好幾天才發現原來是 Gulp 的版本太舊，更新一下就好了XDD。下面是跑不起來的錯誤。\n\n``` bash\nimport gulp from 'gulp';\n^^^^^^\nSyntaxError: Unexpected reserved word\n    at exports.runInThisContext (vm.js:73:16)\n    at Module._compile (module.js:443:25)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Liftoff.handleArguments (/usr/local/lib/node_modules/gulp/bin/gulp.js:116:3)\n    at Liftoff.<anonymous> (/usr/local/lib/node_modules/gulp/node_modules/liftoff/index.js:192:16)\n    at module.exports (/usr/local/lib/node_modules/gulp/node_modules/liftoff/node_modules/flagged-respawn/index.js:17:3)\n```   \n\n\n更新 Global 的 Gulp\n\n``` bash\nnpm update -g gulp\n```\n\n確定版本\n\n``` bash\ngulp -v\n[17:07:37] Requiring external module babel/register\n[17:07:37] CLI version 3.9.0\n[17:07:37] Local version 3.9.0\n```\n\n這樣就搞定啦！", rendered_content: "<p><img src=\"http://i.imgur.com/EYQsDlz.png\" alt=\"Imgur\"></p>\n\n<p>原本在桌機用<a href=\"https://github.com/yeoman/generator-gulp-webapp\" target=\"_blank\">yeoman</a>專案搬到筆電上之後居然跑不起來，弄了好幾天才發現原來是 Gulp 的版本太舊，更新一下就好了XDD。下面是跑不起來的錯誤。</p>\n\n<pre><code class=\"bash\">import gulp from &#39;gulp&#39;;\n^^^^^^\nSyntaxError: Unexpected reserved word\n    at exports.runInThisContext (vm.js:73:16)\n    at Module._compile (module.js:443:25)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Module.require (module.js:365:17)\n    at require (module.js:384:17)\n    at Liftoff.handleArguments (/usr/local/lib/node_modules/gulp/bin/gulp.js:116:3)\n    at Liftoff.&lt;anonymous&gt; (/usr/local/lib/node_modules/gulp/node_modules/liftoff/index.js:192:16)\n    at module.exports (/usr/local/lib/node_modules/gulp/node_modules/liftoff/node_modules/flagged-respawn/index.js:17:3)\n</code></pre>\n\n<p>更新 Global 的 Gulp</p>\n\n<pre><code class=\"bash\">npm update -g gulp\n</code></pre>\n\n<p>確定版本</p>\n\n<pre><code class=\"bash\">gulp -v\n[17:07:37] Requiring external module babel/register\n[17:07:37] CLI version 3.9.0\n[17:07:37] Local version 3.9.0\n</code></pre>\n\n<p>這樣就搞定啦！</p>\n", state: "published", published_at: "2015-06-15 00:00:00"},
  {title: "利用Guard 快速開發PHP程式", content: "![Imgur](http://i.imgur.com/VN3TPrD.png)\n\n這幾天因為工作需求，需要將程式重新使用PHP開發，因為習慣Rails的開發流程後再回去寫傳統的PHP，總是覺得不太順手。Rails可以搭配[Guard](http://zackexplosion.com/p/2)，達到一存檔就讓程式重新跑的效果，但是據我所知，目前PHP沒有搭配的工具可以達到監控檔案目錄讓程式重新跑的效果。\n\n### 找不到工具，那就自己做吧!\n\n既然兩種語言都學過了，就把他們混合起來用吧!，需求其實很簡單，就只有下面幾點而已\n\n* 監控所有**.php**附檔名的檔案\n* 當檔案變更時自動下**php test.php**的指令\n* 顯示結果到終端機\n\n### PHP測試CODE\n\n首先，先準備一份測試用的PHP\n\n**指令**\n\n``` bash\nmkdir guard-php\ncd guard-php\n\nvim test.php\n```\n\n**test.php**\n\n``` php\n<?php\n\techo time();\n?>\n```\n\n範例中的CODE非常簡單，單純echo現在的時間而已，同時也方便我們稍後來檢查Guard有沒有順利執行\n\n### 設定 Gemfile 內容\n\n\n指令\n\n``` bash\ntouch Gemfile\nvim Gemfile\n```\n\n**Gemfile**\n\n``` ruby\nsource 'https://rubygems.org'\ngem 'guard'\n```\n\nGemfile中相當的單純，因為只有用到Guard而已XDD\n\n### Guardfile\n\n``` bash\nguard init\n```\n\n產生Guardfile，因為我們沒有裝任何Guard的Plugin，所以Guardfile產生後只會有一堆註解而已。接著重頭戲來啦，透過inline guard的方式，我們可以直接在Guardfile裡面寫上客製化的執行工作。\n\n**Guardfile**\n\n``` ruby\nmodule ::Guard\n  class Phpcli < Plugin\n    def run_all\n    end\n\n    def run_on_modifications(paths)\n      exec( 'php test.php' )\n    end\n  end\nend\n\nguard 'phpcli' do\n  watch(%r{\\.php})\nend\n```\n\n宣告一個新的class叫做Phpcli，修改**run_on_modifications**這個action，裡面就是每次Guard監測到檔案變更時要執行的工作，如同剛剛的需求，我希望每次存檔時就幫我跑```php test.php```的指令。最後三行是在告訴Guard說要監控哪些檔案的狀態，監控到該告訴哪個module檔案有變更了。\n\n最後，啟動Guard來實驗一下剛剛的流程有沒有錯誤\n\n``` bash\nguard\n```\n\n存取一下test.php後會發現Guard有跑了！\n\n```\nguard-php  guard\n14:51:54 - INFO - Guard is now watching at '/Users/zack/projects/guard-php'\n1432882319%                                                                                                                     \n```\n\n不過怎麼只有跑一次呀XDDDDDDDDDDDDDDD\n\n\n後來發現，使用exec去呼叫shell指令會造成原先的guard執行序斷掉，將guardfile中的exec換成用**`**(backtricks)就可以了\n\n``` ruby\nmodule ::Guard\n  class Phpcli < Plugin\n    def run_all\n\n    end\n\n    def run_on_modifications(paths)\n      puts nil # 為了讓輸出好看一點XD\n      puts `php test.php`\n    end\n  end\nend\n\nguard 'phpcli' do\n  watch(%r{\\.php})\nend\n```\n\n\n程式碼同時也發佈在[GITHUB](https://github.com/cstony0917/guard-phpcli)上\n\n\n\n#### 參考資料\n\n* <https://github.com/guard/guard/wiki/Create-a-guard>\n* <http://guardgem.org/>\n* <http://tech.natemurray.com/2007/03/ruby-shell-commands.html>", rendered_content: "<p><img src=\"http://i.imgur.com/VN3TPrD.png\" alt=\"Imgur\"></p>\n\n<p>這幾天因為工作需求，需要將程式重新使用PHP開發，因為習慣Rails的開發流程後再回去寫傳統的PHP，總是覺得不太順手。Rails可以搭配<a href=\"http://zackexplosion.com/p/2\" target=\"_blank\">Guard</a>，達到一存檔就讓程式重新跑的效果，但是據我所知，目前PHP沒有搭配的工具可以達到監控檔案目錄讓程式重新跑的效果。</p>\n\n<h3>找不到工具，那就自己做吧!</h3>\n\n<p>既然兩種語言都學過了，就把他們混合起來用吧!，需求其實很簡單，就只有下面幾點而已</p>\n\n<ul>\n<li>監控所有<strong>.php</strong>附檔名的檔案</li>\n<li>當檔案變更時自動下<strong>php test.php</strong>的指令</li>\n<li>顯示結果到終端機</li>\n</ul>\n\n<h3>PHP測試CODE</h3>\n\n<p>首先，先準備一份測試用的PHP</p>\n\n<p><strong>指令</strong></p>\n\n<pre><code class=\"bash\">mkdir guard-php\ncd guard-php\n\nvim test.php\n</code></pre>\n\n<p><strong>test.php</strong></p>\n\n<pre><code class=\"php\">&lt;?php\n    echo time();\n?&gt;\n</code></pre>\n\n<p>範例中的CODE非常簡單，單純echo現在的時間而已，同時也方便我們稍後來檢查Guard有沒有順利執行</p>\n\n<h3>設定 Gemfile 內容</h3>\n\n<p>指令</p>\n\n<pre><code class=\"bash\">touch Gemfile\nvim Gemfile\n</code></pre>\n\n<p><strong>Gemfile</strong></p>\n\n<pre><code class=\"ruby\">source &#39;https://rubygems.org&#39;\ngem &#39;guard&#39;\n</code></pre>\n\n<p>Gemfile中相當的單純，因為只有用到Guard而已XDD</p>\n\n<h3>Guardfile</h3>\n\n<pre><code class=\"bash\">guard init\n</code></pre>\n\n<p>產生Guardfile，因為我們沒有裝任何Guard的Plugin，所以Guardfile產生後只會有一堆註解而已。接著重頭戲來啦，透過inline guard的方式，我們可以直接在Guardfile裡面寫上客製化的執行工作。</p>\n\n<p><strong>Guardfile</strong></p>\n\n<pre><code class=\"ruby\">module ::Guard\n  class Phpcli &lt; Plugin\n    def run_all\n    end\n\n    def run_on_modifications(paths)\n      exec( &#39;php test.php&#39; )\n    end\n  end\nend\n\nguard &#39;phpcli&#39; do\n  watch(%r{\\.php})\nend\n</code></pre>\n\n<p>宣告一個新的class叫做Phpcli，修改<strong>run<em>on</em>modifications</strong>這個action，裡面就是每次Guard監測到檔案變更時要執行的工作，如同剛剛的需求，我希望每次存檔時就幫我跑<code>php test.php</code>的指令。最後三行是在告訴Guard說要監控哪些檔案的狀態，監控到該告訴哪個module檔案有變更了。</p>\n\n<p>最後，啟動Guard來實驗一下剛剛的流程有沒有錯誤</p>\n\n<pre><code class=\"bash\">guard\n</code></pre>\n\n<p>存取一下test.php後會發現Guard有跑了！</p>\n\n<pre><code>guard-php  guard\n14:51:54 - INFO - Guard is now watching at &#39;/Users/zack/projects/guard-php&#39;\n1432882319%                                                                                                                     \n</code></pre>\n\n<p>不過怎麼只有跑一次呀XDDDDDDDDDDDDDDD</p>\n\n<p>後來發現，使用exec去呼叫shell指令會造成原先的guard執行序斷掉，將guardfile中的exec換成用<strong>`</strong>(backtricks)就可以了</p>\n\n<pre><code class=\"ruby\">module ::Guard\n  class Phpcli &lt; Plugin\n    def run_all\n\n    end\n\n    def run_on_modifications(paths)\n      puts nil # 為了讓輸出好看一點XD\n      puts `php test.php`\n    end\n  end\nend\n\nguard &#39;phpcli&#39; do\n  watch(%r{\\.php})\nend\n</code></pre>\n\n<p>程式碼同時也發佈在<a href=\"https://github.com/cstony0917/guard-phpcli\" target=\"_blank\">GITHUB</a>上</p>\n\n<h4>參考資料</h4>\n\n<ul>\n<li><a href=\"https://github.com/guard/guard/wiki/Create-a-guard\" target=\"_blank\">https://github.com/guard/guard/wiki/Create-a-guard</a></li>\n<li><a href=\"http://guardgem.org/\" target=\"_blank\">http://guardgem.org/</a></li>\n<li><a href=\"http://tech.natemurray.com/2007/03/ruby-shell-commands.html\" target=\"_blank\">http://tech.natemurray.com/2007/03/ruby-shell-commands.html</a></li>\n</ul>\n", state: "published", published_at: "2015-05-29 00:00:00"},
  {title: "下載露天的訂單資料並且加上規格", content: "![Imgur](http://i.imgur.com/V7rq7fE.png)\n\n露天的訂單資料在下載的時候並不會附上規格（這要怎麼出貨啦 XD），不過透過一些簡單的script就可以把內容全部抓下來了!\n\n專案同時也發佈在 [GitHub](https://github.com/cstony0917/ruten-order-export) 上面。\n\n直接拿原始碼解說\n\n``` javascript\nvar orders = [];\nvar length = 0;\nvar current_length = 0;\n(function(){\n  // 抓出訂單總長度 給後面的 interval 用\n  length = $('.mybid-table tbody tr').length;\n\n  $('.mybid-table tbody tr').each(function(v){\n    // 將所有的 detail 連結抓出來\n    var url = $(this).find('.bk12').attr('href');\n\n    var order = {};\n    // 把所有的欄位塞進來\n    $(this).find('td').each(function(k,v){\n      order[k] = $(v).html();\n    });\n    \n    // 去每個一 Detail 頁面將規格抓出來放到 orders 裡面，並且將 current_length + 1\n    $.get(url, function(res){\n      var spec = $(res).find('.custom_spec .spec').html()\n      order.spec = spec;\n      orders.push(order);\n      current_length++;\n    });\n  });\n\n \n// 產生一個 A Tag 將要下載的內容做 URIComponent encode 放到 href 裡面，接著模擬點擊的動作，就可以資料下載成檔案了!\n// 這段從 stackoverflow 找來的，不過原連結找不到，知道的朋友麻煩告知一下，謝謝\nfunction download(filename, text) {\n  var pom = document.createElement('a');\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  pom.setAttribute('download', filename);\n\n  pom.style.display = 'none';\n  document.body.appendChild(pom);\n\n  pom.click();\n\n  document.body.removeChild(pom);\n}\n\n// 懶得處理非同步，直接塞一個 interval檢查長度有沒有跟一開始抓出來的訂單總長度一樣\nvar interval = setInterval(function(){\n  if(length === current_length){\n    clearInterval(interval);\n    download('yooo.json', JSON.stringify(orders));\n  }  \n},1);\n\n// 最後就會下載一個名為 yooo.json的檔案了\n\n})()\n\n```\n\n詳細的使用方法可以直接看 [README](https://github.com/cstony0917/ruten-order-export/blob/master/README.md)，不過現在這個版本只能下載當下這一頁的內容，還沒做到掃描頁數全部下載的功能...", rendered_content: "<p><img src=\"http://i.imgur.com/V7rq7fE.png\" alt=\"Imgur\"></p>\n\n<p>露天的訂單資料在下載的時候並不會附上規格（這要怎麼出貨啦 XD），不過透過一些簡單的script就可以把內容全部抓下來了!</p>\n\n<p>專案同時也發佈在 <a href=\"https://github.com/cstony0917/ruten-order-export\" target=\"_blank\">GitHub</a> 上面。</p>\n\n<p>直接拿原始碼解說</p>\n\n<pre><code class=\"javascript\">var orders = [];\nvar length = 0;\nvar current_length = 0;\n(function(){\n  // 抓出訂單總長度 給後面的 interval 用\n  length = $(&#39;.mybid-table tbody tr&#39;).length;\n\n  $(&#39;.mybid-table tbody tr&#39;).each(function(v){\n    // 將所有的 detail 連結抓出來\n    var url = $(this).find(&#39;.bk12&#39;).attr(&#39;href&#39;);\n\n    var order = {};\n    // 把所有的欄位塞進來\n    $(this).find(&#39;td&#39;).each(function(k,v){\n      order[k] = $(v).html();\n    });\n\n    // 去每個一 Detail 頁面將規格抓出來放到 orders 裡面，並且將 current_length + 1\n    $.get(url, function(res){\n      var spec = $(res).find(&#39;.custom_spec .spec&#39;).html()\n      order.spec = spec;\n      orders.push(order);\n      current_length++;\n    });\n  });\n\n\n// 產生一個 A Tag 將要下載的內容做 URIComponent encode 放到 href 裡面，接著模擬點擊的動作，就可以資料下載成檔案了!\n// 這段從 stackoverflow 找來的，不過原連結找不到，知道的朋友麻煩告知一下，謝謝\nfunction download(filename, text) {\n  var pom = document.createElement(&#39;a&#39;);\n  pom.setAttribute(&#39;href&#39;, &#39;data:text/plain;charset=utf-8,&#39; + encodeURIComponent(text));\n  pom.setAttribute(&#39;download&#39;, filename);\n\n  pom.style.display = &#39;none&#39;;\n  document.body.appendChild(pom);\n\n  pom.click();\n\n  document.body.removeChild(pom);\n}\n\n// 懶得處理非同步，直接塞一個 interval檢查長度有沒有跟一開始抓出來的訂單總長度一樣\nvar interval = setInterval(function(){\n  if(length === current_length){\n    clearInterval(interval);\n    download(&#39;yooo.json&#39;, JSON.stringify(orders));\n  }  \n},1);\n\n// 最後就會下載一個名為 yooo.json的檔案了\n\n})()\n\n</code></pre>\n\n<p>詳細的使用方法可以直接看 <a href=\"https://github.com/cstony0917/ruten-order-export/blob/master/README.md\" target=\"_blank\">README</a>，不過現在這個版本只能下載當下這一頁的內容，還沒做到掃描頁數全部下載的功能...</p>\n", state: "published", published_at: "2015-06-13 00:00:00"},
  {title: "GitHub 上最長的 Streak 與 Contribution畫圖", content: "前陣子在 [Stackoverflow](http://stackoverflow.com/questions/20099235/who-is-the-user-with-the-longest-streak-on-github) 上看到有人討論這個話題，研究了一下作者的 GitHub 沒想到`Git`可以在`Commit`的時候加上日期，也就是說，可以做未來或者是過去的`Commit`。研究了一下，做了這個專案 <https://github.com/cstony0917/longest-streak>。\n\nCode 的部份其實蠻簡單的，跑個一整年，或是更長的迴圈把所有日期抓出來並且做 commit 就可以玩了，目前我試到1500多天XDD\n\n``` bash\nfor i in {365..3650}\ndo\ndate=`date -v +\"$i\"d +\"%Y/%m/%d\"`\necho $date >> message.txt \n\ngit add . \ngit commit --date=\"$date\" -m \"$date\"\n\ndone\n```\n\n既然可以在過去做 Commit 也就可以拿來畫圖囉 Google 了一下，發現下面幾種已經做好的專案。\n* <https://github.com/IonicaBizau/github-contributions>\n* <https://github.com/public-contributions/HACK>\n* <https://github.com/gelstudios/gitfiti>\n\n不過找來找去，都沒有符合需求的，既然沒有符合需求的，就自己做吧!，完成的專案放在[GitHub](https://github.com/cstony0917/github-contridrawer)上。\n\n首先，到 <http://cdn.zackexplosion.com/github-contridrawer/> 選擇一張PNG的透明圖片，越簡單越好，因為 JOBS 很厲害，所以預設的圖片就是 JOBS。\n\n選完圖片後，會產生預覽效果，如果不好的話就換一張吧，如果沒問題的話就按 `Download` 下載一個 `shell script` \n\n![Imgur](http://i.imgur.com/YLKSZ5Z.png)\n\n接著將下載好的 `script` 放到空的目錄裡面並且執行\n```\nsh ./github-contridrawer.sh\n```\n\n再到 [GitHub](https://github.com/) 上建立新的 repository 接著把 repo push 上去就完成了，目前只有在`OS X`底下側試過，WINDOWS 應該完全看不懂 shell 會失敗。\n\n![Imgur](http://i.imgur.com/4EQ6Ukm.png)\n\n過幾分鐘後回到個人頁面，應該就可以看到成品了!\n\n![Imgur](http://i.imgur.com/xXJUun5.png)\n\n參考資料\n* <http://ss64.com/osx/date.html>\n* <http://stackoverflow.com/questions/498358/how-do-i-do-date-math-in-a-bash-script-on-os-x-leopard>\n* <http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_10_02.html>", rendered_content: "<p>前陣子在 <a href=\"http://stackoverflow.com/questions/20099235/who-is-the-user-with-the-longest-streak-on-github\" target=\"_blank\">Stackoverflow</a> 上看到有人討論這個話題，研究了一下作者的 GitHub 沒想到<code>Git</code>可以在<code>Commit</code>的時候加上日期，也就是說，可以做未來或者是過去的<code>Commit</code>。研究了一下，做了這個專案 <a href=\"https://github.com/cstony0917/longest-streak\" target=\"_blank\">https://github.com/cstony0917/longest-streak</a>。</p>\n\n<p>Code 的部份其實蠻簡單的，跑個一整年，或是更長的迴圈把所有日期抓出來並且做 commit 就可以玩了，目前我試到1500多天XDD</p>\n\n<pre><code class=\"bash\">for i in {365..3650}\ndo\ndate=`date -v +&quot;$i&quot;d +&quot;%Y/%m/%d&quot;`\necho $date &gt;&gt; message.txt \n\ngit add . \ngit commit --date=&quot;$date&quot; -m &quot;$date&quot;\n\ndone\n</code></pre>\n\n<p>既然可以在過去做 Commit 也就可以拿來畫圖囉 Google 了一下，發現下面幾種已經做好的專案。</p>\n\n<ul>\n<li><a href=\"https://github.com/IonicaBizau/github-contributions\" target=\"_blank\">https://github.com/IonicaBizau/github-contributions</a></li>\n<li><a href=\"https://github.com/public-contributions/HACK\" target=\"_blank\">https://github.com/public-contributions/HACK</a></li>\n<li><a href=\"https://github.com/gelstudios/gitfiti\" target=\"_blank\">https://github.com/gelstudios/gitfiti</a></li>\n</ul>\n\n<p>不過找來找去，都沒有符合需求的，既然沒有符合需求的，就自己做吧!，完成的專案放在<a href=\"https://github.com/cstony0917/github-contridrawer\" target=\"_blank\">GitHub</a>上。</p>\n\n<p>首先，到 <a href=\"http://cdn.zackexplosion.com/github-contridrawer/\" target=\"_blank\">http://cdn.zackexplosion.com/github-contridrawer/</a> 選擇一張PNG的透明圖片，越簡單越好，因為 JOBS 很厲害，所以預設的圖片就是 JOBS。</p>\n\n<p>選完圖片後，會產生預覽效果，如果不好的話就換一張吧，如果沒問題的話就按 <code>Download</code> 下載一個 <code>shell script</code> </p>\n\n<p><img src=\"http://i.imgur.com/YLKSZ5Z.png\" alt=\"Imgur\"></p>\n\n<p>接著將下載好的 <code>script</code> 放到空的目錄裡面並且執行</p>\n\n<pre><code>sh ./github-contridrawer.sh\n</code></pre>\n\n<p>再到 <a href=\"https://github.com/\" target=\"_blank\">GitHub</a> 上建立新的 repository 接著把 repo push 上去就完成了，目前只有在<code>OS X</code>底下側試過，WINDOWS 應該完全看不懂 shell 會失敗。</p>\n\n<p><img src=\"http://i.imgur.com/4EQ6Ukm.png\" alt=\"Imgur\"></p>\n\n<p>過幾分鐘後回到個人頁面，應該就可以看到成品了!</p>\n\n<p><img src=\"http://i.imgur.com/xXJUun5.png\" alt=\"Imgur\"></p>\n\n<p>參考資料</p>\n\n<ul>\n<li><a href=\"http://ss64.com/osx/date.html\" target=\"_blank\">http://ss64.com/osx/date.html</a></li>\n<li><a href=\"http://stackoverflow.com/questions/498358/how-do-i-do-date-math-in-a-bash-script-on-os-x-leopard\" target=\"_blank\">http://stackoverflow.com/questions/498358/how-do-i-do-date-math-in-a-bash-script-on-os-x-leopard</a></li>\n<li><a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_10_02.html\" target=\"_blank\">http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_10_02.html</a></li>\n</ul>\n", state: "published", published_at: "2015-06-19 00:00:00"},
  {title: "React 筆記 迴圈", content: "玩了一下 React 整個概念都跟 Angularjs 不太一樣，感覺好卡啊XD，教學的部分官網有很多，這邊直接寫我碰到的問題\n\n\n```\nvar Links = React.createClass({\n    getInitialState : function(){\n        return {\n            items : ['first', 'second']\n        }\n    },\n    handleClick : function(i, item){\n\t\talert(item);\n    },\n    render : function(){\n        return (\n        <ol>\n        {this.state.items.map(function(item, i){\n            var handleClick = this.handleClick.bind(this, i, item);\n            return <li onClick={handleClick}>{item}</li>\n        }, this)}\n        </ol>\n        );\n    }\n});\n\n// 記得一定要用一個標籤把所有的內容包起來，不然會報錯...\nReact.render(\n    <div>\n        <h1>Page title!</h1>\n        <Links />\n    </div>,\n    mountNode\n);\n```\n\n\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"oXeJOJ\" data-default-tab=\"result\" data-user=\"cstony0917\" class='codepen'>See the Pen <a href='http://codepen.io/cstony0917/pen/oXeJOJ/'>oXeJOJ</a> by Zack (<a href='http://codepen.io/cstony0917'>@cstony0917</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>", rendered_content: "<p>玩了一下 React 整個概念都跟 Angularjs 不太一樣，感覺好卡啊XD，教學的部分官網有很多，這邊直接寫我碰到的問題</p>\n\n<pre><code>var Links = React.createClass({\n    getInitialState : function(){\n        return {\n            items : [&#39;first&#39;, &#39;second&#39;]\n        }\n    },\n    handleClick : function(i, item){\n        alert(item);\n    },\n    render : function(){\n        return (\n        &lt;ol&gt;\n        {this.state.items.map(function(item, i){\n            var handleClick = this.handleClick.bind(this, i, item);\n            return &lt;li onClick={handleClick}&gt;{item}&lt;/li&gt;\n        }, this)}\n        &lt;/ol&gt;\n        );\n    }\n});\n\n// 記得一定要用一個標籤把所有的內容包起來，不然會報錯...\nReact.render(\n    &lt;div&gt;\n        &lt;h1&gt;Page title!&lt;/h1&gt;\n        &lt;Links /&gt;\n    &lt;/div&gt;,\n    mountNode\n);\n</code></pre>\n\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"oXeJOJ\" data-default-tab=\"result\" data-user=\"cstony0917\" class='codepen'>See the Pen <a href='http://codepen.io/cstony0917/pen/oXeJOJ/'>oXeJOJ</a> by Zack (<a href='http://codepen.io/cstony0917'>@cstony0917</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n", state: "draft", published_at: "2015-06-17 00:00:00"},
  {title: "requestAnimationFrame 指定 fps", content: "在研究CANVAS畫布時發現到 `requestAnimationFrame` 這個 `function` ，傳統使用 `settimeout` 或 `setinterval` 來跑動畫的方式有可能因為瀏覽器的的行為造成 `FPS` 不太穩定，仔細研究一下之後發現 `requestAnimationFrame` 沒辦法直接像 `setinterval` 直接指令每一次LOOP的時間，因此需要自己 `指定FPS來計算兩次執行的時間差`\n\nDEMO 放在 <http://codepen.io/cstony0917/pen/YXOMrR?editors=001> 上，最近應該會把一些學習到的新東西都放到這個 Repo <https://github.com/cstony0917/Web-Lab>", rendered_content: "<p>在研究CANVAS畫布時發現到 <code>requestAnimationFrame</code> 這個 <code>function</code> ，傳統使用 <code>settimeout</code> 或 <code>setinterval</code> 來跑動畫的方式有可能因為瀏覽器的的行為造成 <code>FPS</code> 不太穩定，仔細研究一下之後發現 <code>requestAnimationFrame</code> 沒辦法直接像 <code>setinterval</code> 直接指令每一次LOOP的時間，因此需要自己 <code>指定FPS來計算兩次執行的時間差</code></p>\n\n<p>DEMO 放在 <a href=\"http://codepen.io/cstony0917/pen/YXOMrR?editors=001\" target=\"_blank\">http://codepen.io/cstony0917/pen/YXOMrR?editors=001</a> 上，最近應該會把一些學習到的新東西都放到這個 Repo <a href=\"https://github.com/cstony0917/Web-Lab\" target=\"_blank\">https://github.com/cstony0917/Web-Lab</a></p>\n", state: "draft", published_at: "2015-07-24 00:00:00"},
  {title: "RAILS + ANGULARJS 製作BLOG", content: "### 環境設定\n\n產生一個新的rails專案\n\n```\nrails new blog\n```\n\n切換到專案的目錄\n\n```\ncd blog\n```\n\n接著利用powder快速建立rails的開發server （POWDER相關資料）待補\n\n```\npowder link && powder open\n```\n\n參考資料\n\n* [http://pow.cx/](http://pow.cx/)\n* [https://github.com/Rodreegez/powder]()\n\n### 建立系統需要的欄位\n\n產生 post model\n\n```\nrails g model post name:string content:text\n```\n\n執行migrate建立資料庫欄位\n\n```\nrake db:migrate\n```\n\n更改預設路由\n\nconfig/routes.rb\n\n```\n  # You can have the root of your site routed with \"root\"\n  # root 'welcome#index'\n  root 'posts#index'\n```\n\n建立 posts controller\n\n```\nrails g controller posts\n```\n\n設定路由表讓系統知道有post這個RESTFUL資源\n\nconfig/routes.rb\n\n```\n  # Example resource route (maps HTTP verbs to controller actions automatically):\n  #   resources :products\n  resources :posts\n```\n\n\n建立 index action取得文章列表\n\napp/controllers/posts_controller.rb\n\n```\nclass PostsController < ApplicationController\n  def index\n    render :json => Post.all\n  end\nend\n```\n\n建立 show action讀取單一文章內容\n\n``` ruby\n  def show\n    render :json => Post.find(params[:id])\n  end\n```\n\n\n\n\n\n\n\n\n", rendered_content: "<h3>環境設定</h3>\n\n<p>產生一個新的rails專案</p>\n\n<pre><code>rails new blog\n</code></pre>\n\n<p>切換到專案的目錄</p>\n\n<pre><code>cd blog\n</code></pre>\n\n<p>接著利用powder快速建立rails的開發server （POWDER相關資料）待補</p>\n\n<pre><code>powder link &amp;&amp; powder open\n</code></pre>\n\n<p>參考資料</p>\n\n<ul>\n<li><a href=\"http://pow.cx/\" target=\"_blank\">http://pow.cx/</a></li>\n<li><a href=\"\" target=\"_blank\">https://github.com/Rodreegez/powder</a></li>\n</ul>\n\n<h3>建立系統需要的欄位</h3>\n\n<p>產生 post model</p>\n\n<pre><code>rails g model post name:string content:text\n</code></pre>\n\n<p>執行migrate建立資料庫欄位</p>\n\n<pre><code>rake db:migrate\n</code></pre>\n\n<p>更改預設路由</p>\n\n<p>config/routes.rb</p>\n\n<pre><code>  # You can have the root of your site routed with &quot;root&quot;\n  # root &#39;welcome#index&#39;\n  root &#39;posts#index&#39;\n</code></pre>\n\n<p>建立 posts controller</p>\n\n<pre><code>rails g controller posts\n</code></pre>\n\n<p>設定路由表讓系統知道有post這個RESTFUL資源</p>\n\n<p>config/routes.rb</p>\n\n<pre><code>  # Example resource route (maps HTTP verbs to controller actions automatically):\n  #   resources :products\n  resources :posts\n</code></pre>\n\n<p>建立 index action取得文章列表</p>\n\n<p>app/controllers/posts_controller.rb</p>\n\n<pre><code>class PostsController &lt; ApplicationController\n  def index\n    render :json =&gt; Post.all\n  end\nend\n</code></pre>\n\n<p>建立 show action讀取單一文章內容</p>\n\n<pre><code class=\"ruby\">  def show\n    render :json =&gt; Post.find(params[:id])\n  end\n</code></pre>\n", state: "published", published_at: "2015-05-17 00:00:00"},
  {title: "防止程式碼在行動裝置被斷行", content: "```\npre {\n  overflow: auto;\n  word-wrap: normal;\n  white-space: pre;\n  code{\n    white-space: pre;\n  }\n}\n```\n\n\n使用Bootstrap的CSS時，會發現在內文貼上程式碼會被斷行，是因為行動裝置的寬度通常較一般大螢幕小很多，個人覺得這樣子非常不美觀，透過上敘的CSS可以讓程式碼不份不會被斷行，而且可以左右scroll。\n\n下圖為修改前後的示範。\n\n![](http://i.imgur.com/GO8IY67.gif)\n", rendered_content: "<pre><code>pre {\n  overflow: auto;\n  word-wrap: normal;\n  white-space: pre;\n  code{\n    white-space: pre;\n  }\n}\n</code></pre>\n\n<p>使用Bootstrap的CSS時，會發現在內文貼上程式碼會被斷行，是因為行動裝置的寬度通常較一般大螢幕小很多，個人覺得這樣子非常不美觀，透過上敘的CSS可以讓程式碼不份不會被斷行，而且可以左右scroll。</p>\n\n<p>下圖為修改前後的示範。</p>\n\n<p><img src=\"http://i.imgur.com/GO8IY67.gif\" alt=\"\"></p>\n", state: "published", published_at: "2015-05-22 00:00:00"},
  {title: "許久不見，PHP處理XML資料 SimpleXML", content: "原本用 sinatra 搭配 builder 來寫 xml 的處理實在非常愉悅。但是壓力測試下去就炸了，效能實在太差啦XD，每秒大概只能處理 135 條查詢而已。因此又回去找舊愛PHP，老情人果然還是給力，但就是很難調教，而且太久沒摸她，有點忘記怎樣的姿勢（手指）比較舒服，這邊記錄一下會用到的的幾個關鍵function。\n\n![Imgur](http://i.imgur.com/Rkb3UhH.png)\n\n用curl從遠端拉資料，不要用內建的```file_get_contents ```，聽同事說常常會出現奇怪的問題造成系統爛掉。效能應該也比較好？下次來比較一下。\n\n\n### 讀取XML\n\n通常XML會從遠端資源讀取，這邊使用curl library\n\n``` php\n// create curl resource \n$ch = curl_init(); \n\n// set url \ncurl_setopt($ch, CURLOPT_URL, $url); \n\n//return the transfer as a string \ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); \n\n// $output contains the output string \n$output = curl_exec($ch); \n\n// close curl resource to free up system resources \ncurl_close($ch); \n\n// 從字串取得XML物件\n$xml = simplexml_load_string($output);\n```\n\n參考來源\n* <http://php.net/manual/en/curl.examples.php>\n\n接著按照XML的結構操作物件就可以讀取出內容了\n\n``` xml\n<posts>\n\t<post>\n\t\t<title>安安，我是標題ㄛ</title>\n\t</post>\n\t<post>\n\t\t<title>安安，我是第二個標題ㄛ</title>\n\t</post>\n</posts>\n```\n\n``` php\n$xml = simplexml_load_string($output);\n\nforeach ($xml->post as $key => $value) {\n  $title = (string)$value->title;\n  var_dump($title);\n}\n```\n\nSimpleXML使用預設參數存取時，會忽略掉root tag，記得加上`(string)` 確定變數casting成要的型別。\n\n確認輸出的結果\n\n``` bash\nstring(24) \"安安，我是標題ㄛ\"\nstring(33) \"安安，我是第二個標題ㄛ\"\n```\n\n### 輸出XML\n\n需要加上CDATA時可以自己建立一個CLASS\n\n``` php\nclass SimpleXMLExtended extends SimpleXMLElement{ \n  public function addCData($cdata_text){ \n   $node= dom_import_simplexml($this); \n   $no = $node->ownerDocument; \n   $node->appendChild($no->createCDATASection($cdata_text)); \n  } \n}\n```\n\n參考來源\n* <http://stackoverflow.com/questions/6260224/how-to-write-cdata-using-simplexmlelement>\n\n\n使用的時候\n``` php\n$root_tag = new SimpleXMLExtended(\"<posts></posts>\");\nforeach ($posts as $key => $value) {\n  $post = $root_tag->addChild('post');\n  $post->addChild('url')->addCData($value['url']);\n}\n```\n\n輸出時就會產生CDATA了\n``` xml\n<?xml version=\"1.0\"?>\n<posts>\n  <post>\n    <url><![CDATA[http://zackexplosion.com/p/16]]></url>\n  </post>\n  <post>\n    <url><![CDATA[http://zackexplosion.com/p/15]]></url>\n  </post>\n</posts>\n```", rendered_content: "<p>原本用 sinatra 搭配 builder 來寫 xml 的處理實在非常愉悅。但是壓力測試下去就炸了，效能實在太差啦XD，每秒大概只能處理 135 條查詢而已。因此又回去找舊愛PHP，老情人果然還是給力，但就是很難調教，而且太久沒摸她，有點忘記怎樣的姿勢（手指）比較舒服，這邊記錄一下會用到的的幾個關鍵function。</p>\n\n<p><img src=\"http://i.imgur.com/Rkb3UhH.png\" alt=\"Imgur\"></p>\n\n<p>用curl從遠端拉資料，不要用內建的<code>file_get_contents</code>，聽同事說常常會出現奇怪的問題造成系統爛掉。效能應該也比較好？下次來比較一下。</p>\n\n<h3>讀取XML</h3>\n\n<p>通常XML會從遠端資源讀取，這邊使用curl library</p>\n\n<pre><code class=\"php\">// create curl resource \n$ch = curl_init(); \n\n// set url \ncurl_setopt($ch, CURLOPT_URL, $url); \n\n//return the transfer as a string \ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); \n\n// $output contains the output string \n$output = curl_exec($ch); \n\n// close curl resource to free up system resources \ncurl_close($ch); \n\n// 從字串取得XML物件\n$xml = simplexml_load_string($output);\n</code></pre>\n\n<p>參考來源</p>\n\n<ul>\n<li><a href=\"http://php.net/manual/en/curl.examples.php\" target=\"_blank\">http://php.net/manual/en/curl.examples.php</a></li>\n</ul>\n\n<p>接著按照XML的結構操作物件就可以讀取出內容了</p>\n\n<pre><code class=\"xml\">&lt;posts&gt;\n    &lt;post&gt;\n        &lt;title&gt;安安，我是標題ㄛ&lt;/title&gt;\n    &lt;/post&gt;\n    &lt;post&gt;\n        &lt;title&gt;安安，我是第二個標題ㄛ&lt;/title&gt;\n    &lt;/post&gt;\n&lt;/posts&gt;\n</code></pre>\n\n<pre><code class=\"php\">$xml = simplexml_load_string($output);\n\nforeach ($xml-&gt;post as $key =&gt; $value) {\n  $title = (string)$value-&gt;title;\n  var_dump($title);\n}\n</code></pre>\n\n<p>SimpleXML使用預設參數存取時，會忽略掉root tag，記得加上<code>(string)</code> 確定變數casting成要的型別。</p>\n\n<p>確認輸出的結果</p>\n\n<pre><code class=\"bash\">string(24) &quot;安安，我是標題ㄛ&quot;\nstring(33) &quot;安安，我是第二個標題ㄛ&quot;\n</code></pre>\n\n<h3>輸出XML</h3>\n\n<p>需要加上CDATA時可以自己建立一個CLASS</p>\n\n<pre><code class=\"php\">class SimpleXMLExtended extends SimpleXMLElement{ \n  public function addCData($cdata_text){ \n   $node= dom_import_simplexml($this); \n   $no = $node-&gt;ownerDocument; \n   $node-&gt;appendChild($no-&gt;createCDATASection($cdata_text)); \n  } \n}\n</code></pre>\n\n<p>參考來源</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/6260224/how-to-write-cdata-using-simplexmlelement\" target=\"_blank\">http://stackoverflow.com/questions/6260224/how-to-write-cdata-using-simplexmlelement</a></li>\n</ul>\n\n<p>使用的時候</p>\n\n<pre><code class=\"php\">$root_tag = new SimpleXMLExtended(&quot;&lt;posts&gt;&lt;/posts&gt;&quot;);\nforeach ($posts as $key =&gt; $value) {\n  $post = $root_tag-&gt;addChild(&#39;post&#39;);\n  $post-&gt;addChild(&#39;url&#39;)-&gt;addCData($value[&#39;url&#39;]);\n}\n</code></pre>\n\n<p>輸出時就會產生CDATA了</p>\n\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;posts&gt;\n  &lt;post&gt;\n    &lt;url&gt;&lt;![CDATA[http://zackexplosion.com/p/16]]&gt;&lt;/url&gt;\n  &lt;/post&gt;\n  &lt;post&gt;\n    &lt;url&gt;&lt;![CDATA[http://zackexplosion.com/p/15]]&gt;&lt;/url&gt;\n  &lt;/post&gt;\n&lt;/posts&gt;\n</code></pre>\n", state: "published", published_at: "2015-06-02 00:00:00"},
  {title: "網域服務商 NAMECHEAP", content: "最近部落格重新開張，決定要放在heroku上，因為我很龜毛，不想要網址出現**www**，所以在heroku上使用時，就必須用root domain設定一個**CNAME**指定到heroku上的DOMAIN，而原先使用的Godaddy並沒有辦法在他們免費代管上的DNS建立root domain的CNAME，因此找上了namecheap這家廠商。\n\n<https://www.namecheap.com>\n\n第一眼看到他們的首頁，覺得非常簡潔，很符合現代的設計，反之Godaddy就比較古老了\n\n![Imgur](http://i.imgur.com/IoKq6fa.jpg)\n\n接著到後台，設定一個CNAME指定到heroku上，就完成新網址的設定囉!\n\n![Imgur](http://i.imgur.com/KJdChGt.png)\n", rendered_content: "<p>最近部落格重新開張，決定要放在heroku上，因為我很龜毛，不想要網址出現<strong>www</strong>，所以在heroku上使用時，就必須用root domain設定一個<strong>CNAME</strong>指定到heroku上的DOMAIN，而原先使用的Godaddy並沒有辦法在他們免費代管上的DNS建立root domain的CNAME，因此找上了namecheap這家廠商。</p>\n\n<p><a href=\"https://www.namecheap.com\" target=\"_blank\">https://www.namecheap.com</a></p>\n\n<p>第一眼看到他們的首頁，覺得非常簡潔，很符合現代的設計，反之Godaddy就比較古老了</p>\n\n<p><img src=\"http://i.imgur.com/IoKq6fa.jpg\" alt=\"Imgur\"></p>\n\n<p>接著到後台，設定一個CNAME指定到heroku上，就完成新網址的設定囉!</p>\n\n<p><img src=\"http://i.imgur.com/KJdChGt.png\" alt=\"Imgur\"></p>\n", state: "published", published_at: "2015-05-26 00:00:00"},
  {title: "Angularjs 製作塗鴉牆效果 infinite scroll", content: "![](http://designshack.net/wp-content/uploads/infinite-scrolling-featured.jpg)\n\n大概兩三年前就做過類似的效果，不過那時候沒有用 Angularjs 而且行動網頁也沒有那麼被重視，現在既然 blog 都用 angularjs 做，就把它模組化吧!，專案目前放在 [GitHub](https://github.com/zackexplosion/ng-infinite-scroll)上，DEMO 可以直接看 blog 首頁，或者是到 <http://zackexplosion.github.io/ng-infinite-scroll/>。\n\n示範圖片\n![](http://i.imgur.com/VI2GtcE.gif)\n\n\nInfinite Scroll 其實非常簡單，只要知道使用者是否已經滑到螢幕的最底下就可以了，為了方便解說，直接拿原始碼來看。\n\n```\nangular\n.module('zackexplosion-ng-infinite-scroll',[])\n.run(\n[         '$rootScope', '$interval', \nfunction ( $rootScope,   $interval){\n\t// 因為 mobile 瀏覽器 對於 scrollTop 事件的支援度不太高，所以只好用一個時間非常短的interval來檢查目前滑動的位置\n    var load_next_page = $interval(function(){\n\t\t\n        // 螢幕的高度，為了各種瀏覽器，所以弄的很複雜，這是從stackoverflow上找來的，有點忘記原始連結了\n        var window_height = \"innerHeight\" in window \n               ? window.innerHeight\n               : document.documentElement.offsetHeight; \n\t\t\n        // 設定事件觸發的門檻 window.pageYOffset 代表使用者現在滑動的距離\n        var threshold = window_height + window.pageYOffset;\n        \n        // body tag 的高度。預設乘以 0.9 故意會比 window.pageYOffset 小一點\n        var offset_height = document.body.offsetHeight  * 0.9;\n\n        // minimal offset_height\n        if( offset_height < window_height) offset_height = window_height;\n\n        // console.log('threshold : ' + threshold);\n        // console.log('offset_height : ' + offset_height);\n\t\t\n        // 當門檻超過 offset_height 的高度，觸發事件\n        if ( threshold > offset_height){\n            $rootScope.$broadcast('scrollToBottom');\n        }        \n    }, 1);\n}])\n```\n\n\n套件的安裝可以透過 rails-assets 安裝，打開`Gemfile`\n\n``` ruby\nsource 'https://rails-assets.org' do\n  gem 'rails-assets-zackexplosion-ng-infinite-scroll\nend\n```\n\n接著`bundle install`，完成之後打開`application.js`加上\n\n``` javascript\n//= require zackexplosion-ng-infinite-scroll\n```\n\n找到 Angularjs 的 dependency，這邊搭配之前完成的 [ngLoading](https://github.com/zackexplosion/ngLoading) 來使用，因為 bower 中有設定 dependency，所以安裝時也會將 ngLoading 也裝起來。\n\n``` javascript\nangular\n.module('blog', [\n\t'zackexplosion-ngLoading',\n    'zackexplosion-ng-infinite-scroll',\n])\n```\n\n在 controller 中使用`$roopScope`的`$on` method 監聽 scrollToBottom 事件。\n\n``` javascript\n$rootScope.$on('scrollToBottom', function(){      \nif ( $rootScope.zackexplosion_loading ) return;\n\n// do something\n});\n```\n\n當然，滑到最下面最常見的事情就是載入更多的內容。下面的範例是目前 blog 使用的 code。\n\n``` javascript\n$scope.loading_next = true;\n$scope.current_page = 1;\n$scope.posts        = [];\n\n($scope.loadNextPage = function(load_next_page){    \n    $scope.loading_next = true;\n\n    var promise = POSTS.query({page: $scope.current_page}).$promise;\n    promise.then(function(res){            \n    \n        $scope.current_page++;\n\n        if (res.length === 0){\n            $scope.loading_next = false;\n        }else{\n            $scope.posts = $scope.posts.concat(res);\n            var selector = '';\n\n            for (var i = res.length - 1; i >= 0; i--) {\n                selector += '.post-' + res[i].id + ',';\n            };\n\n            selector = selector.substring(0,selector.length-1);\n\n            HightlightCodes(selector);\n        }            \n    });\n\n    return promise;\n})();\n\n$rootScope.$on('scrollToBottom', function(){      \n    if ( $rootScope.zackexplosion_loading  || $scope.loading_next === false) return;\n\n    $scope.loadNextPage();\n});\n```\n\n其中比較特別的地方在於，我會檢查回傳的陣列長度，如果是 0 的話代表已經轉到最底下，並且將`$scope.loading_next`這個變數設為`false` 避免無限迴圈，其中的`$scope.current_page`需要搭配 Rails 使用，下面是 controller 與 model 的 code。\n\n\ncontroller 將`params[:page]`作為參數帶到`model`的 list method 中\n``` ruby\n  def index\n    @posts = Post.list params[:page]\n  end\n```\n\nmodel\n\n``` ruby\ndef self.list paging\n\n  paging = paging.to_i\n\n  if paging <= 0 \n    paging = 1\n  end\n  \n  per_page = 3\n\n  offset = (paging - 1)  * per_page\n\n  data = self\n  .limit(per_page)\n  .offset(offset)\n  .order('id desc')\n  .where(:state => 'published')\n\n  return data\nend\n```\n\nmodel 中直接使用了 active record 中的`offset`與`limit`來指定每次輸出的長度，其中的`per_page `代表每次回傳的文章數量，目前寫死在 code 裡面，以後應該讓它進資料庫，這樣做成 blog 服務的時候使用者才方便XD。\n\n其他資料可以直接參考 [DEMO](http://zackexplosion.github.io/ng-infinite-scroll/) \n\n參考資料\n* <http://designshack.net/articles/navigation/to-infinite-scroll-or-not-to-infinite-scroll-where-weve-come-so-far/>", rendered_content: "<p><img src=\"http://designshack.net/wp-content/uploads/infinite-scrolling-featured.jpg\" alt=\"\"></p>\n\n<p>大概兩三年前就做過類似的效果，不過那時候沒有用 Angularjs 而且行動網頁也沒有那麼被重視，現在既然 blog 都用 angularjs 做，就把它模組化吧!，專案目前放在 <a href=\"https://github.com/zackexplosion/ng-infinite-scroll\" target=\"_blank\">GitHub</a>上，DEMO 可以直接看 blog 首頁，或者是到 <a href=\"http://zackexplosion.github.io/ng-infinite-scroll/\" target=\"_blank\">http://zackexplosion.github.io/ng-infinite-scroll/</a>。</p>\n\n<p>示範圖片\n<img src=\"http://i.imgur.com/VI2GtcE.gif\" alt=\"\"></p>\n\n<p>Infinite Scroll 其實非常簡單，只要知道使用者是否已經滑到螢幕的最底下就可以了，為了方便解說，直接拿原始碼來看。</p>\n\n<pre><code>angular\n.module(&#39;zackexplosion-ng-infinite-scroll&#39;,[])\n.run(\n[         &#39;$rootScope&#39;, &#39;$interval&#39;, \nfunction ( $rootScope,   $interval){\n    // 因為 mobile 瀏覽器 對於 scrollTop 事件的支援度不太高，所以只好用一個時間非常短的interval來檢查目前滑動的位置\n    var load_next_page = $interval(function(){\n\n        // 螢幕的高度，為了各種瀏覽器，所以弄的很複雜，這是從stackoverflow上找來的，有點忘記原始連結了\n        var window_height = &quot;innerHeight&quot; in window \n               ? window.innerHeight\n               : document.documentElement.offsetHeight; \n\n        // 設定事件觸發的門檻 window.pageYOffset 代表使用者現在滑動的距離\n        var threshold = window_height + window.pageYOffset;\n\n        // body tag 的高度。預設乘以 0.9 故意會比 window.pageYOffset 小一點\n        var offset_height = document.body.offsetHeight  * 0.9;\n\n        // minimal offset_height\n        if( offset_height &lt; window_height) offset_height = window_height;\n\n        // console.log(&#39;threshold : &#39; + threshold);\n        // console.log(&#39;offset_height : &#39; + offset_height);\n\n        // 當門檻超過 offset_height 的高度，觸發事件\n        if ( threshold &gt; offset_height){\n            $rootScope.$broadcast(&#39;scrollToBottom&#39;);\n        }        \n    }, 1);\n}])\n</code></pre>\n\n<p>套件的安裝可以透過 rails-assets 安裝，打開<code>Gemfile</code></p>\n\n<pre><code class=\"ruby\">source &#39;https://rails-assets.org&#39; do\n  gem &#39;rails-assets-zackexplosion-ng-infinite-scroll\nend\n</code></pre>\n\n<p>接著<code>bundle install</code>，完成之後打開<code>application.js</code>加上</p>\n\n<pre><code class=\"javascript\">//= require zackexplosion-ng-infinite-scroll\n</code></pre>\n\n<p>找到 Angularjs 的 dependency，這邊搭配之前完成的 <a href=\"https://github.com/zackexplosion/ngLoading\" target=\"_blank\">ngLoading</a> 來使用，因為 bower 中有設定 dependency，所以安裝時也會將 ngLoading 也裝起來。</p>\n\n<pre><code class=\"javascript\">angular\n.module(&#39;blog&#39;, [\n    &#39;zackexplosion-ngLoading&#39;,\n    &#39;zackexplosion-ng-infinite-scroll&#39;,\n])\n</code></pre>\n\n<p>在 controller 中使用<code>$roopScope</code>的<code>$on</code> method 監聽 scrollToBottom 事件。</p>\n\n<pre><code class=\"javascript\">$rootScope.$on(&#39;scrollToBottom&#39;, function(){      \nif ( $rootScope.zackexplosion_loading ) return;\n\n// do something\n});\n</code></pre>\n\n<p>當然，滑到最下面最常見的事情就是載入更多的內容。下面的範例是目前 blog 使用的 code。</p>\n\n<pre><code class=\"javascript\">$scope.loading_next = true;\n$scope.current_page = 1;\n$scope.posts        = [];\n\n($scope.loadNextPage = function(load_next_page){    \n    $scope.loading_next = true;\n\n    var promise = POSTS.query({page: $scope.current_page}).$promise;\n    promise.then(function(res){            \n\n        $scope.current_page++;\n\n        if (res.length === 0){\n            $scope.loading_next = false;\n        }else{\n            $scope.posts = $scope.posts.concat(res);\n            var selector = &#39;&#39;;\n\n            for (var i = res.length - 1; i &gt;= 0; i--) {\n                selector += &#39;.post-&#39; + res[i].id + &#39;,&#39;;\n            };\n\n            selector = selector.substring(0,selector.length-1);\n\n            HightlightCodes(selector);\n        }            \n    });\n\n    return promise;\n})();\n\n$rootScope.$on(&#39;scrollToBottom&#39;, function(){      \n    if ( $rootScope.zackexplosion_loading  || $scope.loading_next === false) return;\n\n    $scope.loadNextPage();\n});\n</code></pre>\n\n<p>其中比較特別的地方在於，我會檢查回傳的陣列長度，如果是 0 的話代表已經轉到最底下，並且將<code>$scope.loading_next</code>這個變數設為<code>false</code> 避免無限迴圈，其中的<code>$scope.current_page</code>需要搭配 Rails 使用，下面是 controller 與 model 的 code。</p>\n\n<p>controller 將<code>params[:page]</code>作為參數帶到<code>model</code>的 list method 中</p>\n\n<pre><code class=\"ruby\">  def index\n    @posts = Post.list params[:page]\n  end\n</code></pre>\n\n<p>model</p>\n\n<pre><code class=\"ruby\">def self.list paging\n\n  paging = paging.to_i\n\n  if paging &lt;= 0 \n    paging = 1\n  end\n\n  per_page = 3\n\n  offset = (paging - 1)  * per_page\n\n  data = self\n  .limit(per_page)\n  .offset(offset)\n  .order(&#39;id desc&#39;)\n  .where(:state =&gt; &#39;published&#39;)\n\n  return data\nend\n</code></pre>\n\n<p>model 中直接使用了 active record 中的<code>offset</code>與<code>limit</code>來指定每次輸出的長度，其中的<code>per_page</code>代表每次回傳的文章數量，目前寫死在 code 裡面，以後應該讓它進資料庫，這樣做成 blog 服務的時候使用者才方便XD。</p>\n\n<p>其他資料可以直接參考 <a href=\"http://zackexplosion.github.io/ng-infinite-scroll/\" target=\"_blank\">DEMO</a> </p>\n\n<p>參考資料</p>\n\n<ul>\n<li><a href=\"http://designshack.net/articles/navigation/to-infinite-scroll-or-not-to-infinite-scroll-where-weve-come-so-far/\" target=\"_blank\">http://designshack.net/articles/navigation/to-infinite-scroll-or-not-to-infinite-scroll-where-weve-come-so-far/</a></li>\n</ul>\n", state: "published", published_at: "2015-06-05 00:00:00"},
  {title: "在Windows上建立Ruby on Rails開發環境", content: "相信大家都聽說過，學RoR最好買台Mac或是直接裝在linux上之類的話，沒錯，Windows弄Ruby的環境確實不太穩定，因為很多的套件都是針對Unix平台開發的搬到Windows上可能執行時就會出錯，造成各種踩不完的雷。\n\n正好也有幾位同事使用 windows 工作，因此我想了一個辦法，可以在不轉移環境下，完全在 windows 底下開發RoR，流程大概如下。\n\n1. 在 Windows 上安裝 Ubuntu 虛擬機\n2. 在虛擬機裡面安裝 RoR 開發環境\n3. 利用終端機軟體，從 Windows 連線到 Ubuntu", rendered_content: "<p>相信大家都聽說過，學RoR最好買台Mac或是直接裝在linux上之類的話，沒錯，Windows弄Ruby的環境確實不太穩定，因為很多的套件都是針對Unix平台開發的搬到Windows上可能執行時就會出錯，造成各種踩不完的雷。</p>\n\n<p>正好也有幾位同事使用 windows 工作，因此我想了一個辦法，可以在不轉移環境下，完全在 windows 底下開發RoR，流程大概如下。</p>\n\n<ol>\n<li>在 Windows 上安裝 Ubuntu 虛擬機</li>\n<li>在虛擬機裡面安裝 RoR 開發環境</li>\n<li>利用終端機軟體，從 Windows 連線到 Ubuntu</li>\n</ol>\n", state: "draft", published_at: "2015-06-15 00:00:00"}
])
